Question :
Given a collection of Intervals, the task is to merge all of the overlapping Intervals.

Solution:
//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
    vector<vector<int>> overlappedInterval(vector<vector<int>>& intervals) {
         // Code here
         vector<vector<int>> ans;
         if(intervals.size()==0) return ans;
         sort(intervals.begin(),intervals.end());
         
         vector<int> check(2);
         check[0]=intervals[0][0];
         check[1]=intervals[0][1];
         
         // interration through given array
         
         for(auto it:intervals){
             // check merging or not
             if(check[1]<=it[1]){ // merges
                 if(check[1]>=it[0]) // merges with overlapping
                 {
                     check[1]=it[1];
                 }
                 else{ // not merges
                     ans.push_back(check);
                     check[0]=it[0];
                     check[1]=it[1];
                 }
             }
             else{ // merges completely
                 
             }
             
         }
         ans.push_back(check);
         return ans;
    }
};

/*
check : 1 3

*/

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<vector<int>>Intervals(n);
		for(int i = 0; i < n; i++){
			int x, y;
			cin >> x >> y;
			Intervals[i].push_back(x);
			Intervals[i].push_back(y);
		}
		Solution obj;
		vector<vector<int>> ans = obj.overlappedInterval(Intervals);
		for(auto i: ans){
			for(auto j: i){
				cout << j << " ";
			}
		}
		cout << "\n";
	}
	return 0;
}
// } Driver Code Ends